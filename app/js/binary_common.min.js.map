{"version":3,"sources":["webpack:///./src/javascript/_common/base/client_base.js","webpack:///./src/javascript/_common/base/currency_base.js","webpack:///./src/javascript/_common/base/gtm.js","webpack:///./src/javascript/_common/base/login.js","webpack:///./src/javascript/_common/base/network_monitor_base.js","webpack:///./src/javascript/_common/base/server_time.js","webpack:///./src/javascript/_common/base/socket_base.js","webpack:///./src/javascript/_common/base/socket_cache.js","webpack:///./src/javascript/_common/base/subscription_manager.js","webpack:///./src/javascript/_common/check_new_release.js","webpack:///./src/javascript/_common/common_functions.js","webpack:///./src/javascript/_common/language.js","webpack:///./src/javascript/_common/lib/polyfills/element.matches.js","webpack:///./src/javascript/_common/localize.js","webpack:///./src/javascript/_common/os_detect.js","webpack:///./src/javascript/_common/storage.js","webpack:///./src/javascript/_common/string_util.js","webpack:///./src/javascript/_common/url.js","webpack:///./src/javascript/_common/utility.js"],"names":["moment","require","isCryptocurrency","SocketCache","localize","LocalStore","State","getPropertyValue","isEmptyObject","ClientBase","client_object","current_loginid","isLoggedIn","getAllAccountsObject","get","set","key","value","loginid","arguments","length","undefined","setObject","current_client","Array","isArray","JSON","parse","getObject","getAllLoginids","Object","keys","getAccountType","account_type","test","isAccountOfType","type","only_enabled","this_type","getAccountOfType","id","find","assign","TypesMapConfig","types_map_config","default","financial","gaming","virtual","updateAccountList","account_list","forEach","account","excluded_until","param","param_to_set","value_to_set","canTransferFundsTo","to_loginid","from_currency","to_currency","from_landing_company","to_landing_company","maltainvest","malta","is_from_crypto","is_to_crypto","init","isValidLoginid","valid_login_ids","RegExp","every","hasAccountType","hasCurrencyType","loginids","getAccountTitle","types_map","responseAuthorize","response","authorize","email","currency","is_virtual","parseInt","valueOf","landing_company_name","shouldAcceptTnc","website_tnc_version","getResponse","client_tnc_status","clearAllAccounts","setNewAccount","options","token","clear","localStorage","setItem","currentLandingCompany","landing_company_response","this_shortcode","landing_company_prop","shortcode","shouldCompleteTax","status","getMT5AccountType","group","replace","getBasicUpgradeInfo","upgradeable_landing_companies","can_open_multi","can_upgrade_to","current_landing_company","indexOf","_len","landing_companies","_key","landing_company","canUpgrade","can_upgrade","getLandingCompanyValue","landing_company_object","real","financial_company","gaming_company","concat","getRiskAssessment","is_high_risk","canTransferFunds","some","hasSvgAccount","canChangeCurrency","statement","mt5_login_list","is_current","has_no_mt5","has_account_criteria","count","transactions","module","exports","getLanguage","currencies_config","formatCurrency","toLowerCase","addComma","num","decimal_points","is_crypto","number","String","toFixed","parseFloat","toString","$0","$1","$2","getDecimalPlaces","calcDecimalPlaces","CryptoConfig","crypto_config","BTC","name","min_withdrawal","pa_max_withdrawal","pa_min_withdrawal","BCH","ETH","ETC","LTC","UST","USB","getMinWithdrawal","formatMoney","currency_value","amount","exclude_currency","decimals","minimumFractionDigits","money","sign","Number","decimal_places","isNaN","Math","abs","Intl","maximumFractionDigits","NumberFormat","format","setCurrencies","website_status","getCurrencyName","getTransferLimits","which","transfer_limits","max","min","getTransferFee","currency_from","currency_to","transfer_fee","getMinimumTransferFee","pow","getTextFormat","getMinPayout","getPaWithdrawalLimit","limit","getCurrencies","Cookies","Login","ServerTime","BinarySocket","getElementById","isVisible","getAppId","GTM","isGtmApplicable","pushDataLayer","data","isLoginPages","dataLayer","push","_extends","country_ip","language","pageTitle","pjax","url","document","URL","visitorId","bom_email","t","exec","title","eventHandler","get_settings","login_event","getItem","is_new_account","removeItem","affiliate_token","getJSON","bom_affiliate_token","moment_now","window","time","utc","bom_account_type","bom_currency","bom_country","country","bom_country_abbrev","country_code","location","href","bom_today","unix","event","bom_date_joined","bom_age","diff","date_of_birth","bom_firstname","first_name","bom_lastname","last_name","bom_phone","phone","wait","then","obj","acc_type","login","send","last_transaction_timestamp","bom_transaction_in_last_30d","isAfter","subtract","pushPurchaseData","buy","req","echo_req","passthrough","bom_ui","bom_symbol","symbol","bom_market","bom_contract_type","contract_type","bom_contract_id","contract_id","bom_transaction_id","transaction_id","bom_buy_price","buy_price","bom_payout","payout","bom_amount","bom_basis","basis","bom_expiry_type","bom_duration","duration","bom_duration_unit","duration_unit","bom_barrier","barrier","bom_barrier_high","bom_barrier_low","barrier2","bom_prediction","pushTransactionData","extra_data","transaction","action","includes","gtm_transactions","prototype","hasOwnProperty","call","timestamp","transactions_arr","transaction_time","balance","stringify","mt5NewAccount","mt5_new_account","mt5_account_type","gtm_data","mt5_last_signup","setLoginFlag","event_name","Client","isMobile","isStorageSupported","urlForCurrentDomain","loginUrl","server_url","signup_device","date_first_contact","marketing_queries","pathname","redirectToLogin","sessionStorage","initOneAll","provider","el_button","removeEventListener","addEventListener","e","preventDefault","brand","socialLoginUrl","NetworkMonitorBase","_pending_timeouts","StatusConfig","status_config","online","class","tooltip","offline","blinking","pendings","pending_keys","ws_init","ws_request","pending_timeouts","_defineProperty","ws_config","network_status","updateUI","isOnline","navigator","onLine","setStatus","hasReadyState","ping","ws_events_map","setPending","open","clearPendings","message","close","wsEvent","setTimeout","k","clearTimeout","socket_general_functions","fncUpdateUI","PromiseClass","clock_started","pending","server_time","performance_request_time","get_time_interval","update_time_interval","onTimeUpdated","fncTimeUpdated","requestTime","clearInterval","setInterval","performance","now","timeCounter","error","start_timestamp","performance_response_time","server_time_at_response","updateTime","time_since_response","resolve","clone","timePromise","promise","cloneObject","getSocketURL","BinarySocketBase","binary_socket","config","buffered_sends","req_id","wrong_app_id","is_available","is_disconnect_called","is_connected_before","socket_url","timeouts","promises","no_duplicate_requests","sent_requests","items","has","msg_type","add","remove","splice","waiting_list","promise_obj","this_promises","pr","another_exists","clearTimeouts","isReady","states","s","readyState","sendBufferedRequests","req_obj","shift","request","_len2","msg_types","_key2","is_resolved","last_response","c","forced","callback","subscribe","_typeof","WebSocket","onopen","onOpen","onReconnect","onmessage","msg","this_req_id","onMessage","onclose","onDisconnect","availability","sendBuffered","setOnDisconnect","setOnReconnect","removeOnReconnect","removeOnDisconnect","getStaticHash","payout_currencies","expire","active_symbols","map_to","contracts_for","exchange_rates","data_obj","static_hash","makeKey","response_obj","isBefore","expires","source_obj","map_key","should_match_all","data_key","cashed_response","reload","__webpack_require__","_utility","SubscriptionManager","subscriptions","forget_requested","subscription_id","dispatch","sub_id","stream_id","subscription","sub_info","subscribers","fnc","forgetStream","forget","fncCallback","match_values","Error","forgets_list","filter","hasCallbackFunction","hasValues","Promise","all","request_obj","values_obj","addSubscriptionFromRequest","send_request","subscribe_request","subscription_props","is_stream","prop","isDeepEqual","forgetAll","types_to_forget","sub_ids","forget_all","urlForStatic","shouldForceReload","last_reload","checkNewRelease","current_hash","xhttp","XMLHttpRequest","onreadystatechange","latest_hash","responseText","random","slice","createElement","elem","offsetWidth","offsetHeight","id_selector","CookieStorage","Language","all_languages","ACH","EN","DE","ES","FR","ID","IT","PL","PT","RU","TH","VI","ZH_CN","ZH_TW","url_lang","lang_regex","join","languageFromUrl","custom_url","split","lang","current_lang","crowdin_lang","toUpperCase","body","classList","getAll","setCookie","write","urlFor","trim","urlLang","reset","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","this","ownerDocument","querySelectorAll","i","item","template","Localize","localized_texts","doLocalize","txt","params","text","index","map","localizeKeepPlaceholders","_toConsumableArray","Set","match","sort","forLang","texts_json","locale","userAgent","isProduction","Storage","storage","Store","InScriptStore","object","store","_this","path","cookie_name","cookie_domain","hostname","initialized","domain","Date","read","cookie_value","val","expireDate","isSecure","secure","SessionStore","removeCookies","cookie_names","domains","parent_path","cookie","padLeft","len","char","numberToString","n","toTitleCase","str","charAt","substr","compareBigUnsignedInt","a","b","first_num","second_num","max_length","order","urlForLanguage","getCurrentProductionDomain","Url","location_url","static_host","paramsHash","param_hash","arr_params","parsed","search","p_l","host_map","bot.binary.com","developers.binary.com","academy.binary.com","tech.binary.com","blog.binary.com","pars","should_change_to_legacy","substring","new_url","normalizePath","current_domain","url_object","querySelector","getAttribute","websiteUrl","protocol","getHostMap","resetStaticHost","extend","is_empty","isEqualArray","isEqualObject","arr1","arr2","idx","obj1","obj2","string","content","to_replace","unique","array","findIndex","tag_name","attributes","el","attr","textContent","html","setAttribute","_classCallCheck","reject"],"mappings":"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","file":"binary_common.min.js","sourcesContent":["const moment           = require('moment');\nconst isCryptocurrency = require('./currency_base').isCryptocurrency;\nconst SocketCache      = require('./socket_cache');\nconst localize         = require('../localize').localize;\nconst LocalStore       = require('../storage').LocalStore;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\nconst ClientBase = (() => {\n    const storage_key = 'client.accounts';\n    let client_object = {};\n    let current_loginid;\n\n    const init = () => {\n        current_loginid = LocalStore.get('active_loginid');\n        client_object   = getAllAccountsObject();\n    };\n\n    const isLoggedIn = () => (\n        !isEmptyObject(getAllAccountsObject()) &&\n        get('loginid') &&\n        get('token')\n    );\n\n    const isValidLoginid = () => {\n        if (!isLoggedIn()) return true;\n        const valid_login_ids = new RegExp('^(MX|MF|VRTC|MLT|CR|FOG)[0-9]+$', 'i');\n        return getAllLoginids().every(loginid => valid_login_ids.test(loginid));\n    };\n\n    /**\n     * Stores the client information in local variable and localStorage\n     *\n     * @param {String} key                 The property name to set\n     * @param {String|Number|Object} value The regarding value\n     * @param {String|null} loginid        The account to set the value for\n     */\n    const set = (key, value, loginid = current_loginid) => {\n        if (key === 'loginid' && value !== current_loginid) {\n            LocalStore.set('active_loginid', value);\n            current_loginid = value;\n        } else {\n            if (!(loginid in client_object)) {\n                client_object[loginid] = {};\n            }\n            client_object[loginid][key] = value;\n            LocalStore.setObject(storage_key, client_object);\n        }\n    };\n\n    /**\n     * Returns the client information\n     *\n     * @param {String|null} key     The property name to return the value from, if missing returns the account object\n     * @param {String|null} loginid The account to return the value from\n     */\n    const get = (key, loginid = current_loginid) => {\n        let value;\n        if (key === 'loginid') {\n            value = loginid || LocalStore.get('active_loginid');\n        } else {\n            const current_client = client_object[loginid] || getAllAccountsObject()[loginid] || client_object;\n\n            value = key ? current_client[key] : current_client;\n        }\n        if (!Array.isArray(value) && (+value === 1 || +value === 0 || value === 'true' || value === 'false')) {\n            value = JSON.parse(value || false);\n        }\n        return value;\n    };\n\n    const getAllAccountsObject = () => LocalStore.getObject(storage_key);\n\n    const getAllLoginids = () => Object.keys(getAllAccountsObject());\n\n    const getAccountType = (loginid = current_loginid) => {\n        let account_type;\n        if (/^VR/.test(loginid))          account_type = 'virtual';\n        else if (/^MF/.test(loginid))     account_type = 'financial';\n        else if (/^MLT|MX/.test(loginid)) account_type = 'gaming';\n        return account_type;\n    };\n\n    const isAccountOfType = (type, loginid = current_loginid, only_enabled = false) => {\n        const this_type   = getAccountType(loginid);\n        return ((\n            (type === 'virtual' && this_type === 'virtual') ||\n            (type === 'real'    && this_type !== 'virtual') ||\n            type === this_type) &&\n            (only_enabled ? !get('is_disabled', loginid) : true));\n    };\n\n    const getAccountOfType = (type, only_enabled) => {\n        const id = getAllLoginids().find(loginid => isAccountOfType(type, loginid, only_enabled));\n        return id ? Object.assign({ loginid: id }, get(null, id)) : {};\n    };\n\n    const hasAccountType = (type, only_enabled) => !isEmptyObject(getAccountOfType(type, only_enabled));\n\n    // only considers currency of real money accounts\n    // @param {String} type = crypto|fiat\n    const hasCurrencyType = (type) => {\n        const loginids = getAllLoginids();\n        if (type === 'crypto') {\n            // find if has crypto currency account\n            return loginids.find(loginid =>\n                !get('is_virtual', loginid) && isCryptocurrency(get('currency', loginid)));\n        }\n        // else find if have fiat currency account\n        return loginids.find(loginid =>\n            !get('is_virtual', loginid) && !isCryptocurrency(get('currency', loginid)));\n    };\n\n    const TypesMapConfig = (() => {\n        let types_map_config;\n\n        const initTypesMap = () => ({\n            default  : localize('Real'),\n            financial: localize('Investment'),\n            gaming   : localize('Gaming'),\n            virtual  : localize('Virtual'),\n        });\n\n        return {\n            get: () => {\n                if (!types_map_config) {\n                    types_map_config = initTypesMap();\n                }\n                return types_map_config;\n            },\n        };\n    })();\n\n    const getAccountTitle = loginid => {\n        const types_map = TypesMapConfig.get();\n        return (types_map[getAccountType(loginid)] || types_map.default);\n    };\n\n    const responseAuthorize = (response) => {\n        const authorize = response.authorize;\n        set('email',      authorize.email);\n        set('currency',   authorize.currency);\n        set('is_virtual', +authorize.is_virtual);\n        set('session_start', parseInt(moment().valueOf() / 1000));\n        set('landing_company_shortcode', authorize.landing_company_name);\n        updateAccountList(authorize.account_list);\n    };\n\n    const updateAccountList = (account_list) => {\n        account_list.forEach((account) => {\n            set('excluded_until', account.excluded_until || '', account.loginid);\n            Object.keys(account).forEach((param) => {\n                const param_to_set = param === 'country' ? 'residence' : param;\n                const value_to_set = typeof account[param] === 'undefined' ? '' : account[param];\n                if (param_to_set !== 'loginid') {\n                    set(param_to_set, value_to_set, account.loginid);\n                }\n            });\n        });\n    };\n\n    const shouldAcceptTnc = () => {\n        if (get('is_virtual')) return false;\n        const website_tnc_version = State.getResponse('website_status.terms_conditions_version');\n        const client_tnc_status   = State.getResponse('get_settings.client_tnc_status');\n        return typeof client_tnc_status !== 'undefined' && client_tnc_status !== website_tnc_version;\n    };\n\n    const clearAllAccounts = () => {\n        current_loginid = undefined;\n        client_object   = {};\n        LocalStore.setObject(storage_key, client_object);\n    };\n\n    const setNewAccount = (options) => {\n        if (!options.email || !options.loginid || !options.token) {\n            return false;\n        }\n\n        SocketCache.clear();\n        localStorage.setItem('GTM_new_account', '1');\n\n        set('token',      options.token,       options.loginid);\n        set('email',      options.email,       options.loginid);\n        set('is_virtual', +options.is_virtual, options.loginid);\n        set('loginid',    options.loginid);\n\n        return true;\n    };\n\n    const currentLandingCompany = () => {\n        const landing_company_response = State.getResponse('landing_company') || {};\n        const this_shortcode           = get('landing_company_shortcode');\n        const landing_company_prop     = Object.keys(landing_company_response).find((key) => (\n            this_shortcode === landing_company_response[key].shortcode\n        ));\n        return landing_company_response[landing_company_prop] || {};\n    };\n\n    const shouldCompleteTax = () => isAccountOfType('financial') &&\n        !/crs_tin_information/.test((State.getResponse('get_account_status') || {}).status);\n\n    // remove manager id or master distinction from group\n    // remove EUR or GBP distinction from group\n    const getMT5AccountType = group => (group ? group.replace('\\\\', '_').replace(/_(\\d+|master|EUR|GBP)/, '') : '');\n\n    const getBasicUpgradeInfo = () => {\n        const upgradeable_landing_companies = State.getResponse('authorize.upgradeable_landing_companies');\n\n        let can_open_multi = false;\n        let type,\n            can_upgrade_to;\n        if ((upgradeable_landing_companies || []).length) {\n            const current_landing_company = get('landing_company_shortcode');\n\n            can_open_multi = upgradeable_landing_companies.indexOf(current_landing_company) !== -1;\n\n            // only show upgrade message to landing companies other than current\n            const canUpgrade = (...landing_companies) => landing_companies.find(landing_company => (\n                landing_company !== current_landing_company &&\n                upgradeable_landing_companies.indexOf(landing_company) !== -1\n            ));\n\n            // TODO [->svg]\n            can_upgrade_to = canUpgrade('costarica', 'svg', 'iom', 'malta', 'maltainvest');\n            if (can_upgrade_to) {\n                type = can_upgrade_to === 'maltainvest' ? 'financial' : 'real';\n            }\n        }\n\n        return {\n            type,\n            can_upgrade: !!can_upgrade_to,\n            can_upgrade_to,\n            can_open_multi,\n        };\n    };\n\n    const getLandingCompanyValue = (loginid, landing_company, key) => {\n        let landing_company_object;\n        if (loginid.financial || isAccountOfType('financial', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'financial_company');\n        } else if (loginid.real || isAccountOfType('real', loginid)) {\n            landing_company_object = getPropertyValue(landing_company, 'gaming_company');\n\n            // handle accounts that don't have gaming company\n            if (!landing_company_object) {\n                landing_company_object = getPropertyValue(landing_company, 'financial_company');\n            }\n        } else {\n            const financial_company = (getPropertyValue(landing_company, 'financial_company') || {})[key] || [];\n            const gaming_company    = (getPropertyValue(landing_company, 'gaming_company') || {})[key] || [];\n            landing_company_object  = financial_company.concat(gaming_company);\n            return landing_company_object;\n        }\n        return (landing_company_object || {})[key];\n    };\n\n    const getRiskAssessment = () => {\n        const status       = State.getResponse('get_account_status.status');\n        const is_high_risk = /high/.test(State.getResponse('get_account_status.risk_classification'));\n\n        return (\n            isAccountOfType('financial') ?\n                /(financial_assessment|trading_experience)_not_complete/.test(status) :\n                (is_high_risk && /financial_assessment_not_complete/.test(status))\n        );\n    };\n\n    // API_V3: send a list of accounts the client can transfer to\n    const canTransferFunds = (account) => {\n        if (account) {\n            // this specific account can be used to transfer funds to\n            return canTransferFundsTo(account.loginid);\n        }\n        // at least one account can be used to transfer funds to\n        return Object.keys(client_object).some(loginid => canTransferFundsTo(loginid));\n    };\n\n    const canTransferFundsTo = (to_loginid) => {\n        if (to_loginid === current_loginid || get('is_virtual', to_loginid) || get('is_virtual') ||\n            get('is_disabled', to_loginid)) {\n            return false;\n        }\n        const from_currency = get('currency');\n        const to_currency   = get('currency', to_loginid);\n        if (!from_currency || !to_currency) {\n            return false;\n        }\n        // only transfer to other accounts that have the same currency as current account if one is maltainvest and one is malta\n        if (from_currency === to_currency) {\n            // these landing companies are allowed to transfer funds to each other if they have the same currency\n            const same_cur_allowed = {\n                maltainvest: 'malta',\n                malta      : 'maltainvest',\n            };\n            const from_landing_company = get('landing_company_shortcode');\n            const to_landing_company   = get('landing_company_shortcode', to_loginid);\n            // if same_cur_allowed[from_landing_company] is undefined and to_landing_company is also undefined, it will return true\n            // so we should compare '' === undefined instead\n            return (same_cur_allowed[from_landing_company] || '') === to_landing_company;\n        }\n        // or for other clients if current account is cryptocurrency it should only transfer to fiat currencies and vice versa\n        const is_from_crypto = isCryptocurrency(from_currency);\n        const is_to_crypto   = isCryptocurrency(to_currency);\n        return (is_from_crypto ? !is_to_crypto : is_to_crypto);\n    };\n\n    const hasSvgAccount = () => !!(getAllLoginids().find(loginid => /^CR/.test(loginid)));\n\n    const canChangeCurrency = (statement, mt5_login_list, is_current = true) => {\n        const currency             = get('currency');\n        const has_no_mt5           = mt5_login_list.length === 0;\n        const has_no_transaction   = (statement.count === 0 && statement.transactions.length === 0);\n        const has_account_criteria = has_no_transaction && has_no_mt5;\n\n        // Current API requirements for currently logged-in user successfully changing their account's currency:\n        // 1. User must not have made any transactions\n        // 2. User must not have any MT5 account\n        // 3. Not be a crypto account\n        // 4. Not be a virtual account\n        return is_current ? currency && !get('is_virtual') && has_account_criteria && !isCryptocurrency(currency) : has_account_criteria;\n    };\n\n    return {\n        init,\n        isLoggedIn,\n        isValidLoginid,\n        set,\n        get,\n        getAllLoginids,\n        getAccountType,\n        isAccountOfType,\n        getAccountOfType,\n        hasAccountType,\n        hasCurrencyType,\n        getAccountTitle,\n        responseAuthorize,\n        shouldAcceptTnc,\n        clearAllAccounts,\n        setNewAccount,\n        currentLandingCompany,\n        shouldCompleteTax,\n        getAllAccountsObject,\n        getMT5AccountType,\n        getBasicUpgradeInfo,\n        getLandingCompanyValue,\n        getRiskAssessment,\n        canTransferFunds,\n        hasSvgAccount,\n        canChangeCurrency,\n    };\n})();\n\nmodule.exports = ClientBase;\n","const getLanguage      = require('../language').get;\nconst localize         = require('../localize').localize;\nconst getPropertyValue = require('../utility').getPropertyValue;\n\nlet currencies_config = {};\n\nconst getTextFormat = (number, currency) => `${currency} ${addComma(number, getDecimalPlaces(currency), isCryptocurrency(currency))}`;\n\nconst formatMoney = (currency_value, amount, exclude_currency, decimals = 0, minimumFractionDigits = 0) => {\n    let money = amount;\n    if (money) money = String(money).replace(/,/g, '');\n    const sign           = money && Number(money) < 0 ? '-' : '';\n    const decimal_places = decimals || getDecimalPlaces(currency_value);\n\n    money = isNaN(money) ? 0 : Math.abs(money);\n    if (typeof Intl !== 'undefined') {\n        const options = {\n            minimumFractionDigits: minimumFractionDigits || decimal_places,\n            maximumFractionDigits: decimal_places,\n        };\n        money = new Intl.NumberFormat(getLanguage().toLowerCase().replace('_', '-'), options).format(money);\n    } else {\n        money = addComma(money, decimal_places);\n    }\n\n    return sign + (exclude_currency ? '' : formatCurrency(currency_value)) + money;\n};\n\nconst formatCurrency = currency => `<span class=\"symbols ${(currency || '').toLowerCase()}\"></span>`;\n\nconst addComma = (num, decimal_points, is_crypto) => {\n    let number = String(num || 0).replace(/,/g, '');\n    if (typeof decimal_points !== 'undefined') {\n        number = (+number).toFixed(decimal_points);\n    }\n    if (is_crypto) {\n        number = parseFloat(+number);\n    }\n\n    return number.toString().replace(/(^|[^\\w.])(\\d{4,})/g, ($0, $1, $2) => (\n        $1 + $2.replace(/\\d(?=(?:\\d\\d\\d)+(?!\\d))/g, '$&,')\n    ));\n};\n\nconst calcDecimalPlaces = (currency) => isCryptocurrency(currency) ? 8 : 2;\n\nconst getDecimalPlaces = (currency) => (\n    // need to check currencies_config[currency] exists instead of || in case of 0 value\n    currencies_config[currency] ? getPropertyValue(currencies_config, [currency, 'fractional_digits']) : calcDecimalPlaces(currency)\n);\n\nconst setCurrencies = (website_status) => {\n    currencies_config = website_status.currencies_config;\n};\n\n// (currency in crypto_config) is a back-up in case website_status doesn't include the currency config, in some cases where it's disabled\nconst isCryptocurrency = currency => /crypto/i.test(getPropertyValue(currencies_config, [currency, 'type'])) || (currency in CryptoConfig.get());\n\nconst CryptoConfig = (() => {\n    let crypto_config;\n\n    const initCryptoConfig = () => ({\n        BTC: { name: localize('Bitcoin'),       min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        BCH: { name: localize('Bitcoin Cash'),  min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETH: { name: localize('Ether'),         min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        ETC: { name: localize('Ether Classic'), min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        LTC: { name: localize('Litecoin'),      min_withdrawal: 0.002, pa_max_withdrawal: 5,    pa_min_withdrawal: 0.002 },\n        UST: { name: localize('Tether'),        min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n        USB: { name: localize('Binary Coin'),   min_withdrawal: 0.02,  pa_max_withdrawal: 2000, pa_min_withdrawal: 10 },\n    });\n\n    return {\n        get: () => {\n            if (!crypto_config) {\n                crypto_config = initCryptoConfig();\n            }\n            return crypto_config;\n        },\n    };\n})();\n\nconst getMinWithdrawal = currency => (isCryptocurrency(currency) ? (getPropertyValue(CryptoConfig.get(), [currency, 'min_withdrawal']) || 0.002) : 1);\n\n/**\n * Returns the transfer limits for the account.\n * @param currency\n * @param {string} max|undefined\n * @returns numeric|undefined\n */\nconst getTransferLimits = (currency, which) => {\n    const transfer_limits = getPropertyValue(currencies_config, [currency, 'transfer_between_accounts', 'limits']) || getMinWithdrawal(currency);\n    const decimals        = getDecimalPlaces(currency);\n    if (which === 'max') {\n        return transfer_limits.max ? transfer_limits.max.toFixed(decimals) : undefined;\n    }\n\n    return transfer_limits.min ? transfer_limits.min.toFixed(decimals) : undefined;\n};\n\nconst getTransferFee = (currency_from, currency_to) => {\n    const transfer_fee = getPropertyValue(currencies_config, [currency_from, 'transfer_between_accounts', 'fees', currency_to]);\n    return `${typeof transfer_fee === 'undefined' ? '1' : transfer_fee}%`;\n};\n\n// returns in a string format, e.g. '0.00000001'\nconst getMinimumTransferFee = (currency) => {\n    const decimals = getDecimalPlaces(currency);\n    return `${currency} ${(1 / Math.pow(10, decimals)).toFixed(decimals)}`; // we need toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\n};\n\n// @param {String} limit = max|min\nconst getPaWithdrawalLimit = (currency, limit) => {\n    if (isCryptocurrency(currency)) {\n        return getPropertyValue(CryptoConfig.get(), [currency, `pa_${limit}_withdrawal`]); // pa_min_withdrawal and pa_max_withdrawal used here\n    }\n    return limit === 'max' ? 2000 : 10; // limits for fiat currency\n};\n\nconst getCurrencyName = currency => getPropertyValue(CryptoConfig.get(), [currency, 'name']) || '';\n\nconst getMinPayout = currency => getPropertyValue(currencies_config, [currency, 'stake_default']);\n\nmodule.exports = {\n    formatMoney,\n    formatCurrency,\n    addComma,\n    getDecimalPlaces,\n    setCurrencies,\n    isCryptocurrency,\n    getCurrencyName,\n    getMinWithdrawal,\n    getTransferLimits,\n    getTransferFee,\n    getMinimumTransferFee,\n    getTextFormat,\n    getMinPayout,\n    getPaWithdrawalLimit,\n    getCurrencies: () => currencies_config,\n};\n","const Cookies          = require('js-cookie');\nconst moment           = require('moment');\nconst ClientBase       = require('./client_base');\nconst Login            = require('./login');\nconst ServerTime       = require('./server_time');\nconst BinarySocket     = require('./socket_base');\nconst getElementById   = require('../common_functions').getElementById;\nconst isVisible        = require('../common_functions').isVisible;\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getAppId         = require('../../config').getAppId;\n\nconst GTM = (() => {\n    const isGtmApplicable = () => (/^(1|1098|14473|15284|16303|15265|16929)$/.test(getAppId()));\n\n    const getCommonVariables = () => ({\n        country_ip: State.getResponse('website_status.clients_country'),\n        language  : getLanguage(),\n        pageTitle : pageTitle(),\n        pjax      : State.get('is_loaded_by_pjax'),\n        url       : document.URL,\n        ...ClientBase.isLoggedIn() && {\n            visitorId: ClientBase.get('loginid'),\n            bom_email: ClientBase.get('email'),\n        },\n    });\n\n    const pushDataLayer = (data) => {\n        if (isGtmApplicable() && !Login.isLoginPages()) {\n            dataLayer.push({\n                ...getCommonVariables(),\n                ...data,\n            });\n        }\n    };\n\n    const pageTitle = () => {\n        const t = /^.+[:-]\\s*(.+)$/.exec(document.title);\n        return t && t[1] ? t[1] : document.title;\n    };\n\n    const eventHandler = (get_settings) => {\n        if (!isGtmApplicable()) return;\n        const login_event       = localStorage.getItem('GTM_login');\n        const is_new_account    = localStorage.getItem('GTM_new_account') === '1';\n\n        localStorage.removeItem('GTM_login');\n        localStorage.removeItem('GTM_new_account');\n\n        const affiliate_token = Cookies.getJSON('affiliate_tracking');\n        if (affiliate_token) {\n            pushDataLayer({ bom_affiliate_token: affiliate_token.t });\n        }\n\n        // Get current time (moment, set by server), else fallback to client time\n        const moment_now = window.time || moment().utc();\n        const data = {\n            visitorId         : ClientBase.get('loginid'),\n            bom_account_type  : ClientBase.getAccountType(),\n            bom_currency      : ClientBase.get('currency'),\n            bom_country       : get_settings.country,\n            bom_country_abbrev: get_settings.country_code,\n            bom_email         : get_settings.email,\n            url               : window.location.href,\n            bom_today         : moment_now.unix(),\n        };\n\n        if (is_new_account) {\n            data.event = 'new_account';\n            data.bom_date_joined = data.bom_today;\n        }\n\n        if (!ClientBase.get('is_virtual')) {\n            data.bom_age       = moment_now.diff(moment.unix(get_settings.date_of_birth).utc(), 'year');\n            data.bom_firstname = get_settings.first_name;\n            data.bom_lastname  = get_settings.last_name;\n            data.bom_phone     = get_settings.phone;\n        }\n\n        if (login_event) {\n            data.event = login_event;\n            BinarySocket.wait('mt5_login_list').then((response) => {\n                (response.mt5_login_list || []).forEach((obj) => {\n                    const acc_type = (ClientBase.getMT5AccountType(obj.group) || '')\n                        .replace('real_vanuatu', 'financial').replace('vanuatu_', '').replace(/costarica|svg/, 'gaming'); // i.e. financial_cent, demo_cent, demo_gaming, real_gaming\n                        // TODO [->svg]\n                    if (acc_type) {\n                        data[`mt5_${acc_type}_id`] = obj.login;\n                    }\n                });\n                pushDataLayer(data);\n            });\n        } else {\n            pushDataLayer(data);\n        }\n\n        // check if there are any transactions in the last 30 days for UX interview selection\n        BinarySocket.send({ statement: 1, limit: 1 }).then((response) => {\n            const last_transaction_timestamp = getPropertyValue(response, ['statement', 'transactions', '0', 'transaction_time']);\n            pushDataLayer({\n                bom_transaction_in_last_30d: !!last_transaction_timestamp && moment(last_transaction_timestamp * 1000).isAfter(ServerTime.get().subtract(30, 'days')),\n            });\n        });\n    };\n\n    const pushPurchaseData = (response) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        const buy = response.buy;\n        if (!buy) return;\n        const req  = response.echo_req.passthrough;\n        const data = {\n            event             : 'buy_contract',\n            bom_ui            : 'legacy',\n            bom_symbol        : req.symbol,\n            bom_market        : getElementById('contract_markets').value,\n            bom_currency      : req.currency,\n            bom_contract_type : req.contract_type,\n            bom_contract_id   : buy.contract_id,\n            bom_transaction_id: buy.transaction_id,\n            bom_buy_price     : buy.buy_price,\n            bom_payout        : buy.payout,\n        };\n        Object.assign(data, {\n            bom_amount     : req.amount,\n            bom_basis      : req.basis,\n            bom_expiry_type: getElementById('expiry_type').value,\n        });\n        if (data.bom_expiry_type === 'duration') {\n            Object.assign(data, {\n                bom_duration     : req.duration,\n                bom_duration_unit: req.duration_unit,\n            });\n        }\n        if (isVisible(getElementById('barrier'))) {\n            data.bom_barrier = req.barrier;\n        } else if (isVisible(getElementById('barrier_high'))) {\n            data.bom_barrier_high = req.barrier;\n            data.bom_barrier_low  = req.barrier2;\n        }\n        if (isVisible(getElementById('prediction'))) {\n            data.bom_prediction = req.barrier;\n        }\n\n        pushDataLayer(data);\n    };\n\n    const mt5NewAccount = (response) => {\n        const acc_type = response.mt5_new_account.mt5_account_type ?\n            `${response.mt5_new_account.account_type}_${response.mt5_new_account.mt5_account_type}` : // financial_cent, demo_cent, ...\n            `${response.mt5_new_account.account_type === 'demo' ? 'demo' : 'real'}_gaming`;           // demo_gaming, real_gaming\n\n        const gtm_data = {\n            event          : 'mt5_new_account',\n            bom_email      : ClientBase.get('email'),\n            bom_country    : State.getResponse('get_settings.country'),\n            mt5_last_signup: acc_type,\n        };\n\n        gtm_data[`mt5_${acc_type}_id`] = response.mt5_new_account.login;\n\n        if (/demo/.test(acc_type) && !ClientBase.get('is_virtual')) {\n            gtm_data.visitorId = ClientBase.getAccountOfType('virtual').loginid;\n        }\n\n        pushDataLayer(gtm_data);\n    };\n\n    // Pushes deposit & withdrawal data from transaction-stream to GTM\n    const pushTransactionData = (response, extra_data = {}) => {\n        if (!isGtmApplicable() || ClientBase.get('is_virtual')) return;\n        if (!response.transaction || !response.transaction.action) return;\n        if (!['deposit', 'withdrawal'].includes(response.transaction.action)) return;\n \n        const moment_now  = window.time || moment().utc();\n        const storage_key = 'GTM_transactions';\n        \n        // Remove values from prev days so localStorage doesn't grow to infinity\n        let gtm_transactions = JSON.parse(localStorage.getItem(storage_key)) || {};\n        if (Object.prototype.hasOwnProperty.call(gtm_transactions, 'timestamp')) {\n            if (moment_now.isAfter(moment.unix(gtm_transactions.timestamp).utc(), 'day')) {\n                localStorage.removeItem(storage_key);\n                gtm_transactions = { timestamp: moment_now.unix() };\n            }\n        }\n        const transactions_arr = gtm_transactions.transactions || [];\n        if (!transactions_arr.includes(response.transaction.transaction_id)) {\n            const data = {\n                event           : 'transaction',\n                bom_account_type: ClientBase.getAccountType(),\n                bom_today       : moment_now.unix(),\n                transaction     : {\n                    id     : response.transaction.transaction_id,\n                    type   : response.transaction.action,\n                    time   : response.transaction.transaction_time,\n                    amount : response.transaction.amount,\n                    balance: response.transaction.balance,\n                },\n            };\n            Object.assign(data, extra_data);\n            pushDataLayer(data);\n\n            transactions_arr.push(response.transaction.transaction_id);\n            gtm_transactions.transactions = transactions_arr;\n            gtm_transactions.timestamp    = gtm_transactions.timestamp || moment_now.unix();\n\n            localStorage.setItem(storage_key, JSON.stringify(gtm_transactions));\n        }\n    };\n\n    return {\n        pushDataLayer,\n        eventHandler,\n        pushPurchaseData,\n        pushTransactionData,\n        mt5NewAccount,\n        setLoginFlag: (event_name) => { if (isGtmApplicable()) localStorage.setItem('GTM_login', event_name); },\n    };\n})();\n\nmodule.exports = GTM;\n","const Client              = require('./client_base');\nconst getElementById      = require('../common_functions').getElementById;\nconst getLanguage         = require('../language').get;\nconst isMobile            = require('../os_detect').isMobile;\nconst isStorageSupported  = require('../storage').isStorageSupported;\nconst LocalStore          = require('../storage').LocalStore;\nconst urlForCurrentDomain = require('../url').urlForCurrentDomain;\nconst getAppId            = require('../../config').getAppId;\n\nconst Login = (() => {\n    const redirectToLogin = () => {\n        if (!Client.isLoggedIn() && !isLoginPages() && isStorageSupported(sessionStorage)) {\n            sessionStorage.setItem('redirect_url', window.location.href);\n            window.location.href = loginUrl();\n        }\n    };\n\n    const loginUrl = () => {\n        const server_url = localStorage.getItem('config.server_url');\n        const language   = getLanguage();\n        const signup_device      = LocalStore.get('signup_device') || (isMobile() ? 'mobile' : 'desktop');\n        const date_first_contact = LocalStore.get('date_first_contact');\n        const marketing_queries   = `&signup_device=${signup_device}${date_first_contact ? `&date_first_contact=${date_first_contact}` : ''}`;\n\n        return ((server_url && /qa/.test(server_url)) ?\n            `https://${server_url}/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}` :\n            urlForCurrentDomain(`https://oauth.binary.com/oauth2/authorize?app_id=${getAppId()}&l=${language}${marketing_queries}`)\n        );\n    };\n\n    // TODO: update this to handle logging into /app/ url\n    const isLoginPages = () => /logged_inws|redirect/i.test(window.location.pathname);\n\n    const socialLoginUrl = brand => (`${loginUrl()}&social_signup=${brand}`);\n\n    const initOneAll = () => {\n        ['google', 'facebook'].forEach(provider => {\n            const el_button = getElementById(`#button_${provider}`);\n            el_button.removeEventListener('click');\n            el_button.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.location.href = socialLoginUrl(provider);\n            });\n        });\n    };\n\n    return {\n        redirectToLogin,\n        isLoginPages,\n        initOneAll,\n    };\n})();\n\nmodule.exports = Login;\n","const BinarySocket = require('./socket_base');\nconst localize     = require('../localize').localize;\n\n/*\n * Monitors the network status and initialises the WebSocket connection\n * 1. online : check the WS status (init/send: blink after timeout, open/message: online)\n * 2. offline: it is offline\n */\nconst NetworkMonitorBase = (() => {\n    const StatusConfig = (() => {\n        let status_config;\n\n        const initStatusConfig = () => ({\n            online  : { class: 'online',  tooltip: localize('Online') },\n            offline : { class: 'offline', tooltip: localize('Offline') },\n            blinking: { class: 'blinker', tooltip: localize('Connecting to server') },\n        });\n\n        return {\n            get: (status) => {\n                if (!status_config) {\n                    status_config = initStatusConfig();\n                }\n                return status_config[status];\n            },\n        };\n    })();\n\n    const pendings = {};\n    const pending_keys = {\n        ws_init   : 'ws_init',\n        ws_request: 'ws_request',\n    };\n    const pending_timeouts = {\n        [pending_keys.ws_init]   : 5000,\n        [pending_keys.ws_request]: 10000,\n    };\n\n    let ws_config,\n        network_status,\n        updateUI;\n\n    const init = (socket_general_functions, fncUpdateUI) => {\n        updateUI  = fncUpdateUI;\n        ws_config = Object.assign({ wsEvent, isOnline }, socket_general_functions);\n\n        if ('onLine' in navigator) {\n            window.addEventListener('online',  setStatus);\n            window.addEventListener('offline', setStatus);\n        } else { // if not supported, default to online and fallback to WS checks\n            navigator.onLine = true;\n        }\n\n        if (isOnline()) {\n            BinarySocket.init(ws_config);\n        }\n\n        setStatus(isOnline() ? 'online' : 'offline');\n    };\n\n    const isOnline = () => navigator.onLine;\n\n    const wsReconnect = () => {\n        if (isOnline() && BinarySocket.hasReadyState(2, 3)) { // CLOSING or CLOSED\n            BinarySocket.init(ws_config);\n        } else {\n            BinarySocket.send({ ping: 1 }); // trigger a request to get stable status sooner\n        }\n    };\n\n    const setStatus = (status) => {\n        if (!isOnline()) {\n            network_status = 'offline';\n        } else if (pending_keys[status] || network_status === 'offline') {\n            network_status = 'blinking';\n            wsReconnect();\n        } else {\n            network_status = 'online';\n        }\n\n        if (typeof updateUI === 'function') {\n            updateUI(StatusConfig.get(network_status), isOnline());\n        }\n    };\n\n    const ws_events_map = {\n        init   : () => setPending(pending_keys.ws_init),\n        open   : () => clearPendings(pending_keys.ws_init),\n        send   : () => setPending(pending_keys.ws_request),\n        message: () => clearPendings(),\n        close  : () => setPending(pending_keys.ws_init),\n    };\n\n    const wsEvent = (event) => {\n        if (typeof ws_events_map[event] === 'function') {\n            ws_events_map[event]();\n        }\n    };\n\n    const setPending = (key) => {\n        if (!pendings[key]) {\n            pendings[key] = setTimeout(() => {\n                pendings[key] = undefined;\n                setStatus(key);\n            }, pending_timeouts[key]);\n        }\n    };\n\n    const clearPendings = (key) => {\n        const clear = (k) => {\n            clearTimeout(pendings[k]);\n            pendings[k] = undefined;\n            if (k === pending_keys.ws_request) {\n                setStatus('online');\n            }\n        };\n\n        if (key) {\n            clear(key);\n        } else {\n            Object.keys(pendings).forEach(clear);\n        }\n    };\n\n    return {\n        init,\n        wsEvent,\n    };\n})();\n\nmodule.exports = NetworkMonitorBase;\n","const moment       = require('moment');\nconst BinarySocket = require('./socket_base');\nconst PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let server_time,\n        performance_request_time,\n        get_time_interval,\n        update_time_interval,\n        onTimeUpdated;\n\n    const init = (fncTimeUpdated) => {\n        if (!clock_started) {\n            onTimeUpdated = fncTimeUpdated;\n            requestTime();\n            clearInterval(get_time_interval);\n            get_time_interval = setInterval(requestTime, 30000);\n            clock_started = true;\n        }\n    };\n\n    const requestTime = () => {\n        performance_request_time = performance.now();\n        BinarySocket.send({ time: 1 }).then(timeCounter);\n    };\n\n    const timeCounter = (response) => {\n        if (response.error) return;\n\n        if (!clock_started) {\n            init();\n            return;\n        }\n\n        clearInterval(update_time_interval);\n\n        const start_timestamp = response.time;\n        const performance_response_time = performance.now();\n        const time_taken = performance_response_time - performance_request_time;\n        const server_time_at_response = ((start_timestamp * 1000) + time_taken);\n\n        const updateTime = () => {\n            const time_since_response = performance.now() - performance_response_time;\n            server_time = moment(server_time_at_response + time_since_response).utc();\n\n            if (typeof onTimeUpdated === 'function') {\n                onTimeUpdated();\n            }\n        };\n        updateTime();\n        pending.resolve();\n        update_time_interval = setInterval(updateTime, 1000);\n    };\n\n    const get = () => server_time ? server_time.clone() : undefined;\n\n    return {\n        init,\n        get,\n        timePromise: pending.promise,\n    };\n})();\n\nmodule.exports = ServerTime;\n","const ClientBase       = require('./client_base');\nconst SocketCache      = require('./socket_cache');\nconst getLanguage      = require('../language').get;\nconst State            = require('../storage').State;\nconst cloneObject      = require('../utility').cloneObject;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst isEmptyObject    = require('../utility').isEmptyObject;\nconst PromiseClass     = require('../utility').PromiseClass;\nconst getAppId         = require('../../config').getAppId;\nconst getSocketURL     = require('../../config').getSocketURL;\n\n/*\n * An abstraction layer over native javascript WebSocket,\n * which provides additional functionality like\n * reopen the closed connection and process the buffered requests\n */\nconst BinarySocketBase = (() => {\n    let binary_socket;\n\n    let config               = {};\n    let buffered_sends       = [];\n    let req_id               = 0;\n    let wrong_app_id         = 0;\n    let is_available         = true;\n    let is_disconnect_called = false;\n    let is_connected_before  = false;\n\n    const socket_url = `${getSocketURL()}?app_id=${getAppId()}&l=${getLanguage()}`;\n    const timeouts   = {};\n    const promises   = {};\n\n    const no_duplicate_requests = [\n        'authorize',\n        'get_settings',\n        'residence_list',\n        'landing_company',\n        'payout_currencies',\n        'asset_index',\n    ];\n\n    const sent_requests = {\n        items : [],\n        clear : () => { sent_requests.items = []; },\n        has   : msg_type => sent_requests.items.indexOf(msg_type) >= 0,\n        add   : (msg_type) => { if (!sent_requests.has(msg_type)) sent_requests.items.push(msg_type); },\n        remove: (msg_type) => {\n            if (sent_requests.has(msg_type)) sent_requests.items.splice(sent_requests.items.indexOf(msg_type, 1));\n        },\n    };\n\n    const waiting_list = {\n        items: {},\n        add  : (msg_type, promise_obj) => {\n            if (!waiting_list.items[msg_type]) {\n                waiting_list.items[msg_type] = [];\n            }\n            waiting_list.items[msg_type].push(promise_obj);\n        },\n        resolve: (response) => {\n            const msg_type      = response.msg_type;\n            const this_promises = waiting_list.items[msg_type];\n            if (this_promises && this_promises.length) {\n                this_promises.forEach((pr) => {\n                    if (!waiting_list.another_exists(pr, msg_type)) {\n                        pr.resolve(response);\n                    }\n                });\n                waiting_list.items[msg_type] = [];\n            }\n        },\n        another_exists: (pr, msg_type) => (\n            Object.keys(waiting_list.items)\n                .some(type => (\n                    type !== msg_type &&\n                    waiting_list.items[type].indexOf(pr) !== -1\n                ))\n        ),\n    };\n\n    const clearTimeouts = () => {\n        Object.keys(timeouts).forEach((key) => {\n            clearTimeout(timeouts[key]);\n            delete timeouts[key];\n        });\n    };\n\n    const isReady = () => hasReadyState(1);\n\n    const isClose = () => !binary_socket || hasReadyState(2, 3);\n\n    const hasReadyState = (...states) => binary_socket && states.some(s => binary_socket.readyState === s);\n\n    const sendBufferedRequests = () => {\n        while (buffered_sends.length > 0 && is_available) {\n            const req_obj = buffered_sends.shift();\n            send(req_obj.request, req_obj.options);\n        }\n    };\n\n    const wait = (...msg_types) => {\n        const promise_obj = new PromiseClass();\n        let is_resolved   = true;\n        msg_types.forEach((msg_type) => {\n            const last_response = State.get(['response', msg_type]);\n            if (!last_response) {\n                if (msg_type !== 'authorize' || ClientBase.isLoggedIn()) {\n                    waiting_list.add(msg_type, promise_obj);\n                    is_resolved = false;\n                }\n            } else if (msg_types.length === 1) {\n                promise_obj.resolve(last_response);\n            }\n        });\n        if (is_resolved) {\n            promise_obj.resolve();\n        }\n        return promise_obj.promise;\n    };\n\n    /**\n     * @param {Object} data: request object\n     * @param {Object} options:\n     *      forced  : {boolean}  sends the request regardless the same msg_type has been sent before\n     *      msg_type: {string}   specify the type of request call\n     *      callback: {function} to call on response of streaming requests\n     */\n    const send = function (data, options = {}) {\n        const promise_obj = options.promise || new PromiseClass();\n\n        if (!data || isEmptyObject(data)) return promise_obj.promise;\n\n        const msg_type = options.msg_type || no_duplicate_requests.find(c => c in data);\n\n        // Fetch from cache\n        if (!options.forced) {\n            const response = SocketCache.get(data, msg_type);\n            if (response) {\n                State.set(['response', msg_type], cloneObject(response));\n                if (isReady() && is_available) { // make the request to keep the cache updated\n                    binary_socket.send(JSON.stringify(data));\n                }\n                promise_obj.resolve(response);\n                return promise_obj.promise;\n            }\n        }\n\n        // Fetch from state\n        if (!options.forced && msg_type && no_duplicate_requests.indexOf(msg_type) !== -1) {\n            const last_response = State.get(['response', msg_type]);\n            if (last_response) {\n                promise_obj.resolve(last_response);\n                return promise_obj.promise;\n            } else if (sent_requests.has(msg_type)) {\n                return wait(msg_type).then((response) => {\n                    promise_obj.resolve(response);\n                    return promise_obj.promise;\n                });\n            }\n        }\n\n        if (!data.req_id) {\n            data.req_id = ++req_id;\n        }\n        promises[data.req_id] = {\n            callback: (response) => {\n                if (typeof options.callback === 'function') {\n                    options.callback(response);\n                } else {\n                    promise_obj.resolve(response);\n                }\n            },\n            subscribe: !!data.subscribe,\n        };\n\n        if (isReady() && is_available && config.isOnline()) {\n            is_disconnect_called = false;\n            if (!getPropertyValue(data, 'passthrough') && !getPropertyValue(data, 'verify_email')) {\n                data.passthrough = {};\n            }\n\n            binary_socket.send(JSON.stringify(data));\n            config.wsEvent('send');\n            if (msg_type && !sent_requests.has(msg_type)) {\n                sent_requests.add(msg_type);\n            }\n        } else if (+data.time !== 1) { // Do not buffer all time requests\n            buffered_sends.push({ request: data, options: Object.assign(options, { promise: promise_obj }) });\n        }\n\n        return promise_obj.promise;\n    };\n\n    const init = (options) => {\n        if (wrong_app_id === getAppId()) {\n            return;\n        }\n        if (typeof options === 'object' && config !== options) {\n            config         = options;\n            buffered_sends = [];\n        }\n        clearTimeouts();\n        config.wsEvent('init');\n\n        if (isClose()) {\n            binary_socket = new WebSocket(socket_url);\n            State.set('response', {});\n        }\n\n        binary_socket.onopen = () => {\n            config.wsEvent('open');\n            if (ClientBase.isLoggedIn()) {\n                send({ authorize: ClientBase.get('token') }, { forced: true });\n            } else {\n                sendBufferedRequests();\n            }\n\n            if (typeof config.onOpen === 'function') {\n                config.onOpen(isReady());\n            }\n\n            if (typeof config.onReconnect === 'function' && is_connected_before) {\n                config.onReconnect();\n            }\n\n            if (!is_connected_before) {\n                is_connected_before = true;\n            }\n        };\n\n        binary_socket.onmessage = (msg) => {\n            config.wsEvent('message');\n            const response = msg.data ? JSON.parse(msg.data) : undefined;\n            if (response) {\n                SocketCache.set(response);\n                const msg_type = response.msg_type;\n\n                // store in State\n                if (!getPropertyValue(response, ['echo_req', 'subscribe']) || /balance|website_status/.test(msg_type)) {\n                    State.set(['response', msg_type], cloneObject(response));\n                }\n                // resolve the send promise\n                const this_req_id = response.req_id;\n                const pr          = this_req_id ? promises[this_req_id] : null;\n                if (pr && typeof pr.callback === 'function') {\n                    pr.callback(response);\n                    if (!pr.subscribe) {\n                        delete promises[this_req_id];\n                    }\n                }\n                // resolve the wait promise\n                waiting_list.resolve(response);\n\n                if (getPropertyValue(response, ['error', 'code']) === 'InvalidAppID') {\n                    wrong_app_id = getAppId();\n                }\n\n                if (typeof config.onMessage === 'function') {\n                    config.onMessage(response);\n                }\n            }\n        };\n\n        binary_socket.onclose = () => {\n            sent_requests.clear();\n            clearTimeouts();\n            config.wsEvent('close');\n\n            if (wrong_app_id !== getAppId() && typeof config.onDisconnect === 'function' && !is_disconnect_called) {\n                config.onDisconnect();\n                is_disconnect_called = true;\n            }\n        };\n    };\n\n    const clear = (msg_type) => {\n        buffered_sends = [];\n        if (msg_type) {\n            State.set(['response', msg_type], undefined);\n            sent_requests.remove(msg_type);\n        }\n    };\n\n    const availability = (status) => {\n        if (typeof status !== 'undefined') {\n            is_available = !!status;\n        }\n        return is_available;\n    };\n\n    return {\n        init,\n        wait,\n        send,\n        clear,\n        clearTimeouts,\n        availability,\n        hasReadyState,\n        sendBuffered      : sendBufferedRequests,\n        get               : () => binary_socket,\n        setOnDisconnect   : (onDisconnect) => { config.onDisconnect = onDisconnect; },\n        setOnReconnect    : (onReconnect) => { config.onReconnect = onReconnect; },\n        removeOnReconnect : () => { delete config.onReconnect; },\n        removeOnDisconnect: () => { delete config.onDisconnect; },\n    };\n})();\n\nmodule.exports = BinarySocketBase;\n","const moment           = require('moment');\nconst getLanguage      = require('../language').get;\nconst LocalStore       = require('../storage').LocalStore;\nconst getPropertyValue = require('../utility').getPropertyValue;\nconst getStaticHash    = require('../utility').getStaticHash;\nconst isEmptyObject    = require('../utility').isEmptyObject;\n\n/*\n * Caches WS responses to reduce delay time and number of requests\n * Stores data in LocalStore which is the first one available in: localStorage, sessionStorage, InScriptStore\n *\n * 1. It caches only the response of those calls which determined in `config`\n * 2. It doesn't cache responses which returned error\n * 3. The value is requested by BinarySocket,\n *    if this returns a value according to the logic here, socket code take it as response\n *    but also triggers an async `send` request, to keep the cache updated for next time\n * 4. Uses client's time to set and check for expiry, as the expire durations are not so long to need a more precise one\n *    (And doesn't worth to wait for the response of time call)\n * 5. Some responses should be cached by a particular value from request (e.g. contracts_for_frxAUDJPY)\n *    so there can be more than one value for a particular call\n * 6. Clears the whole cache regardless their expire time on the following events:\n *    6.1. Client changes: login / logout / switch loginid\n *    6.2. Detect a new release (static hash changed)\n */\nconst SocketCache = (() => {\n    // keys are msg_type\n    // expire: how long to keep the value (in minutes)\n    // map_to: to store different responses of the same key, should be array of:\n    //     string  : the property value from echo_req\n    //     function: return value of the function\n    const config = {\n        payout_currencies: { expire: 10 },\n        active_symbols   : { expire: 10, map_to: ['product_type', 'landing_company', getLanguage] },\n        contracts_for    : { expire: 10, map_to: ['contracts_for', 'product_type', 'currency'] },\n        exchange_rates   : { expire: 60, map_to: ['base_currency'] },\n    };\n\n    const storage_key = 'ws_cache';\n\n    let data_obj = {};\n\n    const set = (response) => {\n        const msg_type = response.msg_type;\n\n        if (!config[msg_type]) return;\n\n        // prevent unwanted page behaviour\n        // if a cached version already exists but it gives an error after being called for updating the cache\n        const cashed_response = get(response.echo_req);\n        if ((response.error || !response[msg_type]) && cashed_response && !cashed_response.error) {\n            clear();\n            window.location.reload();\n            return;\n        }\n\n        const key      = makeKey(response.echo_req, msg_type);\n        const expires  = moment().add(config[msg_type].expire, 'm').valueOf();\n\n        if (!data_obj.static_hash) {\n            data_obj.static_hash = getStaticHash();\n        }\n\n        data_obj[key] = { value: response, expires };\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const get = (request, msg_type) => {\n        let response;\n\n        if (isEmptyObject(data_obj)) {\n            data_obj = LocalStore.getObject(storage_key);\n            if (isEmptyObject(data_obj)) return undefined;\n        }\n\n        if (data_obj.static_hash !== getStaticHash()) { // new release\n            clear();\n        }\n\n        const key          = makeKey(request, msg_type);\n        const response_obj = getPropertyValue(data_obj, key) || {};\n\n        if (moment().isBefore(response_obj.expires)) {\n            response = response_obj.value;\n        } else { // remove if expired\n            remove(key);\n        }\n\n        return response;\n    };\n\n    const makeKey = (source_obj = {}, msg_type = '') => {\n        let key = msg_type || Object.keys(source_obj).find(type => config[type]);\n\n        if (key && !isEmptyObject(source_obj)) {\n            ((config[key] || {}).map_to || []).forEach((map_key) => {\n                const value = typeof map_key === 'function' ? map_key() : source_obj[map_key];\n                key += map_key ? `_${value || ''}` : '';\n            });\n        }\n\n        return key;\n    };\n\n    const remove = (key, should_match_all) => {\n        if (should_match_all) {\n            Object.keys(data_obj).forEach((data_key) => {\n                if (data_key.indexOf(key) !== -1) {\n                    delete data_obj[data_key];\n                }\n            });\n        } else if (key in data_obj) {\n            delete data_obj[key];\n        }\n        LocalStore.setObject(storage_key, data_obj);\n    };\n\n    const clear = () => {\n        LocalStore.remove(storage_key);\n        data_obj = {};\n    };\n\n    return {\n        set,\n        get,\n        remove,\n        clear,\n    };\n})();\n\nmodule.exports = SocketCache;\n","import BinarySocket   from './socket_base';\nimport {\n    cloneObject,\n    getPropertyValue,\n    isDeepEqual,\n    isEmptyObject }   from '../utility';\n\n/**\n * A layer over BinarySocket to handle subscribing to streaming calls\n * in order to keep track of subscriptions, manage forget, prevent multiple subscription at the same time, ...\n *\n * structure of the the subscription object is:\n * {\n *     1: { msg_type: 'proposal', request: { ... }, stream_id: '...', subscribers: [ ... ] },\n *     2: ...\n * }\n * object keys: subscription_id that assigned to each subscription\n * msg_type   : msg_type of the request for faster filtering\n * request    : the request object, used to subscribe to the same stream when there is a new subscribe request with exactly the same values\n * stream_id  : id of the stream which stored from its response and used to forget the stream when needed\n * subscribers: an array of callbacks to dispatch the response to\n */\nconst SubscriptionManager = (() => {\n    const subscriptions    = {};\n    const forget_requested = {};\n\n    let subscription_id = 0;\n\n    /**\n     * To submit request for a new subscription\n     *\n     * @param {String}   msg_type             msg_type of the request\n     * @param {Object}   request_obj          the whole object of the request to be made\n     * @param {Function} fncCallback          callback function to pass the responses to\n     * @param {Boolean}  should_forget_first  when it's true: forgets the previous subscription, then subscribes after receiving the forget response (if any)\n     */\n    const subscribe = (msg_type, request_obj, fncCallback, should_forget_first = false) => {\n        if (should_forget_first) {\n            forget(msg_type, fncCallback).then(() => {\n                subscribe(msg_type, request_obj, fncCallback);\n            });\n            return;\n        }\n\n        let sub_id = Object.keys(subscriptions).find(id => isDeepEqual(request_obj, subscriptions[id].request));\n\n        if (!sub_id) {\n            sub_id = ++subscription_id;\n\n            subscriptions[sub_id] = {\n                msg_type,\n                request    : cloneObject(request_obj),\n                stream_id  : '',             // stream_id will be updated after receiving the response\n                subscribers: [fncCallback],\n            };\n\n            BinarySocket.send(request_obj, {\n                callback: (response) => dispatch(response, sub_id),\n            });\n        } else if (!hasCallbackFunction(sub_id, fncCallback)) {\n            // there is already an active subscription for the very same request which fncCallback is not subscribed to it yet\n            subscriptions[sub_id].subscribers.push(fncCallback);\n        }\n    };\n\n    /**\n     * Add subscription without subscribers from request\n     * E.g. open subscription to proposal_open_contract on buy request\n     * @param {String}   msg_type               msg_type of the subscription\n     * @param {Object}   send_request           the object of the request to be made\n     * @param {Object}   subscribe_request      the object of the subscription request\n     * @param {Array}    subscription_props     Array of prop strings to add to subscribe_request from initial request, e.g. contract_id\n     */\n    const addSubscriptionFromRequest = (msg_type, send_request, subscribe_request, subscription_props) =>\n        new Promise((resolve) => {\n            let sub_id;\n            let is_stream = false;\n\n            BinarySocket.send(send_request, {\n                callback: (response) => {\n                    if (response.error) {\n                        return resolve(response);\n                    }\n                    if (!is_stream) {\n                        is_stream = true;\n                        sub_id    = ++subscription_id;\n\n                        if (subscription_props && Array.isArray(subscription_props)) {\n                            subscription_props.forEach((prop) => {\n                                if (response[response.msg_type][prop]) {\n                                    subscribe_request[prop] = response[response.msg_type][prop];\n                                }\n                            });\n                        }\n\n                        subscriptions[sub_id] = {\n                            msg_type,\n                            request    : cloneObject(subscribe_request),\n                            stream_id  : '',             // stream_id will be updated after receiving the response\n                            subscribers: [],\n                        };\n                        return resolve(response);\n                    }\n                    return dispatch(response, sub_id);\n                },\n            });\n        });\n\n    // dispatches the response to subscribers of the specific subscription id (internal use only)\n    const dispatch = (response, sub_id) => {\n        const stream_id = getPropertyValue(response, [response.msg_type, 'id']) || getPropertyValue(response.subscription, ['id']);\n\n        if (!subscriptions[sub_id]) {\n            if (!forget_requested[stream_id]) {\n                forgetStream(stream_id);\n            }\n            return;\n        }\n\n        const sub_info = subscriptions[sub_id];\n        // set the stream_id\n        if (!sub_info.stream_id && stream_id) {\n            sub_info.stream_id = stream_id;\n        }\n\n        // callback subscribers\n        const subscribers = sub_info.subscribers;\n        if (subscribers.length) {\n            if (\n                // it is the first response\n                !sub_info.stream_id &&\n                    (\n                        // the first response returned error\n                        response.error\n                        || (\n                            // not a subscription (i.e. subscribed proposal_open_contract for an expired contract)\n                            // also to filter out streams with no stream id but later it will continue streaming (i.e. proposal_open_contract without contract id)\n                            !isEmptyObject(response[response.msg_type]) &&\n                            // check msg_type to filter out those calls which don't return stream `id` on first response (tick_history, ...)\n                            response.msg_type === sub_info.msg_type\n                        )\n                    )\n                ||\n                // remove when response isn't first and response has no stream_id\n                !stream_id && sub_info.stream_id\n            ) {\n                delete subscriptions[sub_id];\n            }\n            sub_info.subscribers.forEach((fnc) => {\n                fnc(response);\n            });\n        } else {\n            delete subscriptions[sub_id];\n            forgetStream(sub_info.stream_id);\n        }\n    };\n\n    /**\n     * To forget a subscription which submitted for a specific callback function\n     *\n     * @param  {String}   msg_type      msg_type to forget\n     * @param  {Function} fncCallback   the same function passed to subscribe()\n     *     (this is the way to distinguish between different subscribers of the same stream at the same time)\n     * @param  {Object}   match_values  optional, to only forget subscriptions having request that \"contains\" provided values\n     * @return {Promise}  the promise object of all possible forget requests\n     */\n    const forget = (msg_type, fncCallback, match_values) => {\n        if (typeof fncCallback !== 'function') {\n            throw new Error(`Missing callback function. To forget all subscriptions of msg_type: ${msg_type}, please call forgetAll().`);\n        }\n\n        // find corresponding id(s)\n        const sub_ids = Object.keys(subscriptions).filter(id => (\n            subscriptions[id].msg_type === msg_type &&\n            hasCallbackFunction(id, fncCallback)\n        ));\n\n        const forgets_list = [];\n        sub_ids.forEach((id) => {\n            if (match_values && !hasValues(subscriptions[id].request, match_values)) {\n                return;\n            }\n            const stream_id = subscriptions[id].stream_id;\n            if (stream_id && subscriptions[id].subscribers.length === 1) {\n                delete subscriptions[id];\n                forgets_list.push(forgetStream(stream_id));\n            } else {\n                // there are other subscribers, or for some reason there is no stream_id:\n                // (i.e. returned an error, or forget() being called before the first response)\n                subscriptions[id].subscribers.splice(subscriptions[id].subscribers.indexOf(fncCallback), 1);\n            }\n        });\n        return Promise.all(forgets_list);\n    };\n\n    /**\n     * To forget all active subscriptions of a list of msg_types\n     *\n     * @param  {String}  msg_types  list of msg_types to forget\n     * @return {Promise} the promise object of all possible forget_all requests\n     */\n    const forgetAll = (...msg_types) => {\n        const types_to_forget = {};\n\n        msg_types.forEach((msg_type) => {\n            const sub_ids = Object.keys(subscriptions).filter(id => subscriptions[id].msg_type === msg_type);\n            if (sub_ids.length) {\n                sub_ids.forEach((id) => {\n                    delete subscriptions[id];\n                });\n                types_to_forget[msg_type] = true;\n            }\n        });\n\n        return Promise.resolve(\n            !isEmptyObject(types_to_forget) ?\n                BinarySocket.send({ forget_all: Object.keys(types_to_forget) }) :\n                {}\n        );\n    };\n\n    const forgetStream = (stream_id) => {\n        forget_requested[stream_id] = true; // to prevent forgetting multiple times\n        return Promise.resolve(\n            stream_id ?\n                BinarySocket.send({ forget: stream_id }).then(() => { delete forget_requested[stream_id]; }) :\n                {}\n        );\n    };\n\n    const hasCallbackFunction = (sub_id, fncCallback) =>\n        (subscriptions[sub_id] && subscriptions[sub_id].subscribers.indexOf(fncCallback) !== -1);\n\n    const hasValues = (request_obj, values_obj) => (\n        typeof request_obj === 'object' &&\n        typeof values_obj  === 'object' &&\n        Object.keys(values_obj).every(key => request_obj[key] === values_obj[key])\n    );\n\n    return {\n        addSubscriptionFromRequest,\n        subscribe,\n        forget,\n        forgetAll,\n    };\n})();\n\nexport default SubscriptionManager;\n","const moment        = require('moment');\nconst urlForStatic  = require('./url').urlForStatic;\nconst getStaticHash = require('./utility').getStaticHash;\n\n// only reload if it's more than 10 minutes since the last reload\nconst shouldForceReload = last_reload => !last_reload || +last_reload + (10 * 60 * 1000) < moment().valueOf();\n\n// calling this method is handled by GTM tags\nconst checkNewRelease = () => {\n    const last_reload = localStorage.getItem('new_release_reload_time');\n    if (!shouldForceReload(last_reload)) return false;\n    localStorage.setItem('new_release_reload_time', moment().valueOf());\n\n    const current_hash = getStaticHash();\n    const xhttp        = new XMLHttpRequest();\n\n    xhttp.onreadystatechange = () => {\n        if (+xhttp.readyState === 4 && +xhttp.status === 200) {\n            const latest_hash = xhttp.responseText;\n            if (latest_hash && current_hash && latest_hash !== current_hash) {\n                window.location.reload(true);\n            }\n        }\n    };\n    xhttp.open('GET', urlForStatic(`version?${Math.random().toString(36).slice(2)}`), true);\n    xhttp.send();\n\n    return true;\n};\n\nmodule.exports = {\n    shouldForceReload,\n    checkNewRelease,\n};\n","const createElement = require('./utility').createElement;\n\n/*\n * function to check if element is visible or not\n *\n */\nconst isVisible = elem => !(!elem || (elem.offsetWidth === 0 && elem.offsetHeight === 0));\n\n/*\n * @param  {String}  id_selector   the selector for the element\n * @param  {Element} parent        optional selector to use for parent, defaults to document\n * @return {Element}               return element if it exists, if it doesn't return a dummy element\n */\nconst getElementById = (id_selector, parent = document) => parent.getElementById(id_selector) || createElement('div');\n\nmodule.exports = {\n    isVisible,\n    getElementById,\n};\n","const Cookies       = require('js-cookie');\nconst CookieStorage = require('./storage').CookieStorage;\n\nconst Language = (() => {\n    const all_languages = {\n        ACH  : 'Translations',\n        EN   : 'English',\n        DE   : 'Deutsch',\n        ES   : 'Español',\n        FR   : 'Français',\n        ID   : 'Indonesia',\n        IT   : 'Italiano',\n        PL   : 'Polish',\n        PT   : 'Português',\n        RU   : 'Русский',\n        TH   : 'Thai',\n        VI   : 'Tiếng Việt',\n        ZH_CN: '简体中文',\n        ZH_TW: '繁體中文',\n    };\n    const default_language = 'EN';\n\n    const setCookieLanguage = (lang) => {\n        if (!Cookies.get('language') || lang) {\n            const cookie = new CookieStorage('language');\n            cookie.write((lang || getLanguage()).toUpperCase());\n        }\n    };\n\n    let url_lang = null;\n\n    const lang_regex = new RegExp(`^(${Object.keys(all_languages).join('|')})$`, 'i');\n\n    const languageFromUrl = (custom_url) => {\n        if (url_lang && !custom_url) return url_lang;\n        const url_params = (custom_url || window.location.href).split('/').slice(3);\n        const language   = (url_params.find(lang => lang_regex.test(lang)) || '');\n        if (!custom_url) {\n            url_lang = language;\n        }\n        return language;\n    };\n\n    let current_lang = null;\n\n    const getLanguage = () => {\n        if (/ach/i.test(current_lang) || /ach/i.test(languageFromUrl())) {\n            const crowdin_lang_key = 'jipt_language_code_binary-static';\n            const crowdin_lang     = localStorage.getItem(crowdin_lang_key) || Cookies.get(crowdin_lang_key); // selected language for in-context translation\n            if (crowdin_lang) {\n                current_lang = crowdin_lang.toUpperCase().replace('-', '_').toUpperCase();\n                if (document.body) {\n                    document.body.classList.add(current_lang); // set the body class removed by crowdin code\n                }\n            }\n        }\n        current_lang = (current_lang || (languageFromUrl() || Cookies.get('language') || default_language).toUpperCase());\n        return current_lang;\n    };\n\n    const urlForLanguage = (lang, url = window.location.href) =>\n        url.replace(new RegExp(`/${getLanguage()}/`, 'i'), `/${(lang || default_language).trim().toLowerCase()}/`);\n\n    return {\n        getAll   : () => all_languages,\n        setCookie: setCookieLanguage,\n        get      : getLanguage,\n        urlFor   : urlForLanguage,\n        urlLang  : languageFromUrl,\n        reset    : () => { url_lang = null; current_lang = null; },\n    };\n})();\n\nmodule.exports = Language;\n","if (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.matchesSelector ||\n        Element.prototype.mozMatchesSelector ||\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.oMatchesSelector ||\n        Element.prototype.webkitMatchesSelector ||\n        function(s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n}\n","const moment   = require('moment');\nconst template = require('./utility').template;\n\nconst Localize = (() => {\n    let localized_texts;\n\n    const localizeForLang = (lang) => {\n        localized_texts = texts_json[lang.toUpperCase()];\n        moment.locale(lang.toLowerCase());\n    };\n\n    const doLocalize = (txt, params) => {\n        let text = txt;\n\n        const index = text.replace(/[\\s|.]/g, '_');\n\n        text = (localized_texts && localized_texts[index]) || text;\n\n        // only use template when explicitly required\n        return params ? template(text, params) : text;\n    };\n\n    const localize = (text, params) => (\n        Array.isArray(text) ? text.map(t => doLocalize(t, params)) : doLocalize(text, params)\n    );\n\n    /**\n     * Localizes the text, but doesn't replace placeholders\n     * The localized text through this method should replace the placeholders later. e.g. using template()\n     * @param  {String} text - text to be localized\n     * @return {String} the localized text having the original placeholders ([_1], ...)\n     */\n    const localizeKeepPlaceholders = (text) => (\n        localize(\n            text /* localize-ignore */,\n            [...new Set(text.match(/\\[_(\\d+)]/g).sort())]\n        )\n    );\n\n    return {\n        localize,\n        localizeKeepPlaceholders,\n        forLang: localizeForLang,\n    };\n})();\n\nmodule.exports = Localize;\n","const isMobile = () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\nmodule.exports = {\n    isMobile,\n};\n","const Cookies          = require('js-cookie');\nconst getPropertyValue = require('./utility').getPropertyValue;\nconst isEmptyObject    = require('./utility').isEmptyObject;\nconst isProduction     = require('../config').isProduction;\n\nconst getObject = function (key) {\n    return JSON.parse(this.getItem(key) || '{}');\n};\n\nconst setObject = function (key, value) {\n    if (value && value instanceof Object) {\n        this.setItem(key, JSON.stringify(value));\n    }\n};\n\nif (typeof Storage !== 'undefined') {\n    Storage.prototype.getObject = getObject;\n    Storage.prototype.setObject = setObject;\n}\n\nconst isStorageSupported = (storage) => {\n    if (typeof storage === 'undefined') {\n        return false;\n    }\n\n    const test_key = 'test';\n    try {\n        storage.setItem(test_key, '1');\n        storage.removeItem(test_key);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst Store = function (storage) {\n    this.storage           = storage;\n    this.storage.getObject = getObject;\n    this.storage.setObject = setObject;\n};\n\nStore.prototype = {\n    get(key) {\n        return this.storage.getItem(key) || undefined;\n    },\n    set(key, value) {\n        if (typeof value !== 'undefined') {\n            this.storage.setItem(key, value);\n        }\n    },\n    getObject(key) {\n        return typeof this.storage.getObject === 'function' // Prevent runtime error in IE\n            ? this.storage.getObject(key)\n            : JSON.parse(this.storage.getItem(key) || '{}');\n    },\n    setObject(key, value) {\n        if (typeof this.storage.setObject === 'function') { // Prevent runtime error in IE\n            this.storage.setObject(key, value);\n        } else {\n            this.storage.setItem(key, JSON.stringify(value));\n        }\n    },\n    remove(key) { this.storage.removeItem(key); },\n    clear()     { this.storage.clear(); },\n};\n\nconst InScriptStore = function (object) {\n    this.store = typeof object !== 'undefined' ? object : {};\n};\n\nInScriptStore.prototype = {\n    get(key) {\n        return getPropertyValue(this.store, key);\n    },\n    set(k, value, obj = this.store) {\n        let key = k;\n        if (!Array.isArray(key)) key = [key];\n        if (key.length > 1) {\n            if (!(key[0] in obj) || isEmptyObject(obj[key[0]])) obj[key[0]] = {};\n            this.set(key.slice(1), value, obj[key[0]]);\n        } else {\n            obj[key[0]] = value;\n        }\n    },\n    getObject(key) {\n        return JSON.parse(this.get(key) || '{}');\n    },\n    setObject(key, value) {\n        this.set(key, JSON.stringify(value));\n    },\n    remove(...keys) {\n        keys.forEach((key) => { delete this.store[key]; });\n    },\n    clear()   { this.store = {}; },\n    has(key)  { return this.get(key) !== undefined; },\n    keys()    { return Object.keys(this.store); },\n    call(key) { if (typeof this.get(key) === 'function') this.get(key)(); },\n};\n\nconst State     = new InScriptStore();\nState.prototype = InScriptStore.prototype;\n/**\n * Shorthand function to get values from response object of State\n *\n * @param {String} pathname\n *     e.g. getResponse('authorize.currency') == get(['response', 'authorize', 'authorize', 'currency'])\n */\nState.prototype.getResponse = function (pathname) {\n    let path = pathname;\n    if (typeof path === 'string') {\n        const keys = path.split('.');\n        path = ['response', keys[0]].concat(keys);\n    }\n    return this.get(path);\n};\nState.set('response', {});\n\nconst CookieStorage = function (cookie_name, cookie_domain) {\n    const hostname = window.location.hostname;\n\n    this.initialized = false;\n    this.cookie_name = cookie_name;\n    this.domain      = cookie_domain || (isProduction() ? `.${hostname.split('.').slice(-2).join('.')}` : hostname);\n    this.path        = '/';\n    this.expires     = new Date('Thu, 1 Jan 2037 12:00:00 GMT');\n    this.value       = {};\n};\n\nCookieStorage.prototype = {\n    read() {\n        const cookie_value = Cookies.get(this.cookie_name);\n        try {\n            this.value = cookie_value ? JSON.parse(cookie_value) : {};\n        } catch (e) {\n            this.value = {};\n        }\n        this.initialized = true;\n    },\n    write(val, expireDate, isSecure) {\n        if (!this.initialized) this.read();\n        this.value = val;\n        if (expireDate) this.expires = expireDate;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: this.expires,\n            path   : this.path,\n            domain : this.domain,\n            secure : !!isSecure,\n        });\n    },\n    get(key) {\n        if (!this.initialized) this.read();\n        return this.value[key];\n    },\n    set(key, val) {\n        if (!this.initialized) this.read();\n        this.value[key] = val;\n        Cookies.set(this.cookie_name, this.value, {\n            expires: new Date(this.expires),\n            path   : this.path,\n            domain : this.domain,\n        });\n    },\n    remove() {\n        Cookies.remove(this.cookie_name, {\n            path  : this.path,\n            domain: this.domain,\n        });\n    },\n};\n\nconst removeCookies = (...cookie_names) => {\n    const domains = [\n        `.${document.domain.split('.').slice(-2).join('.')}`,\n        `.${document.domain}`,\n    ];\n\n    let parent_path = window.location.pathname.split('/', 2)[1];\n    if (parent_path !== '') {\n        parent_path = `/${parent_path}`;\n    }\n\n    cookie_names.forEach((c) => {\n        Cookies.remove(c, { path: '/', domain: domains[0] });\n        Cookies.remove(c, { path: '/', domain: domains[1] });\n        Cookies.remove(c);\n        if (new RegExp(c).test(document.cookie) && parent_path) {\n            Cookies.remove(c, { path: parent_path, domain: domains[0] });\n            Cookies.remove(c, { path: parent_path, domain: domains[1] });\n            Cookies.remove(c, { path: parent_path });\n        }\n    });\n};\n\nlet SessionStore,\n    LocalStore;\n\nif (isStorageSupported(window.localStorage)) {\n    LocalStore = new Store(window.localStorage);\n}\nif (isStorageSupported(window.sessionStorage)) {\n    SessionStore = new Store(window.sessionStorage);\n}\n\nif (!LocalStore) {\n    LocalStore = new InScriptStore();\n}\nif (!SessionStore) {\n    SessionStore = new InScriptStore();\n}\n\nmodule.exports = {\n    isStorageSupported,\n    CookieStorage,\n    removeCookies,\n    State,\n    SessionStore,\n    LocalStore,\n};\n","const toTitleCase = str => (\n    (str || '').replace(/\\w[^\\s/\\\\]*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase())\n);\n\nconst padLeft = (txt, len, char) => {\n    const text = String(txt || '');\n    return text.length >= len ? text : `${Array((len - text.length) + 1).join(char)}${text}`;\n};\n\nconst compareBigUnsignedInt = (a, b) => {\n    let first_num  = numberToString(a);\n    let second_num = numberToString(b);\n    if (!first_num || !second_num) {\n        return '';\n    }\n    const max_length = Math.max(first_num.length, second_num.length);\n    first_num        = padLeft(first_num, max_length, '0');\n    second_num       = padLeft(second_num, max_length, '0');\n\n    // lexicographical comparison\n    let order = 0;\n    if (first_num !== second_num) {\n        order = first_num > second_num ? 1 : -1;\n    }\n\n    return order;\n};\n\nconst numberToString = n => (typeof n === 'number' ? String(n) : n);\n\nmodule.exports = {\n    toTitleCase,\n    padLeft,\n    numberToString,\n    compareBigUnsignedInt,\n};\n","const urlForLanguage             = require('./language').urlFor;\nconst urlLang                    = require('./language').urlLang;\nconst getCurrentProductionDomain = require('../config').getCurrentProductionDomain;\nrequire('url-polyfill');\n\nconst Url = (() => {\n    let location_url,\n        static_host;\n\n    const reset = () => {\n        location_url = window ? window.location : location_url;\n    };\n\n    const params = (href) => {\n        const arr_params = [];\n        const parsed     = ((href ? new URL(href) : location_url).search || '').substr(1).split('&');\n        let p_l          = parsed.length;\n        while (p_l--) {\n            const param = parsed[p_l].split('=');\n            arr_params.push(param);\n        }\n        return arr_params;\n    };\n\n    const paramsHash = (href) => {\n        const param_hash = {};\n        const arr_params = params(href);\n        let param        = arr_params.length;\n        while (param--) {\n            if (arr_params[param][0]) {\n                param_hash[arr_params[param][0]] = arr_params[param][1] || '';\n            }\n        }\n        return param_hash;\n    };\n\n    const normalizePath = path => (path ? path.replace(/(^\\/|\\/$|[^a-zA-Z0-9-_/])/g, '') : '');\n\n    const urlFor = (path, pars, language, should_change_to_legacy = false) => {\n        const lang = (language || urlLang()).toLowerCase();\n        // url language might differ from passed language, so we will always replace using the url language\n        const url_lang = (language ? urlLang().toLowerCase() : lang);\n        const url = window.location.href;\n        let domain = url.substring(0, url.indexOf(`/${url_lang}/`) + url_lang.length + 2);\n        if (should_change_to_legacy) {\n            domain = domain.replace(/\\/app/,'');\n        }\n        const new_url = `${domain}${(normalizePath(path) || 'home')}.html${(pars ? `?${pars}` : '')}`;\n        // replace old lang with new lang\n        return urlForLanguage(lang, new_url);\n    };\n\n    const default_domain = 'binary.com';\n    const host_map = { // the exceptions regarding updating the URLs\n        'bot.binary.com'       : 'www.binary.bot',\n        'developers.binary.com': 'developers.binary.com', // same, shouldn't change\n        'academy.binary.com'   : 'academy.binary.com',\n        'tech.binary.com'      : 'tech.binary.com',\n        'blog.binary.com'      : 'blog.binary.com',\n    };\n\n    const urlForCurrentDomain = (href) => {\n        const current_domain = getCurrentProductionDomain();\n\n        if (!current_domain) {\n            return href; // don't change when domain is not supported\n        }\n\n        const url_object = new URL(href);\n        if (Object.keys(host_map).includes(url_object.hostname)) {\n            url_object.hostname = host_map[url_object.hostname];\n        } else if (url_object.hostname.indexOf(default_domain) !== -1) {\n            // to keep all non-Binary links unchanged, we use default domain for all Binary links in the codebase (javascript and templates)\n            url_object.hostname = url_object.hostname.replace(new RegExp(`\\\\.${default_domain}`, 'i'), `.${current_domain}`);\n        } else {\n            return href;\n        }\n\n        return url_object.href;\n    };\n\n    const urlForStatic = (path = '') => {\n        if (!static_host || static_host.length === 0) {\n            static_host = document.querySelector('script[src*=\"vendor.min.js\"]');\n            if (static_host) {\n                static_host = static_host.getAttribute('src');\n            }\n\n            if (static_host && static_host.length > 0) {\n                static_host = static_host.substr(0, static_host.indexOf('/js/') + 1);\n            } else {\n                static_host = Url.websiteUrl();\n            }\n        }\n\n        return static_host + path.replace(/(^\\/)/g, '');\n    };\n\n    return {\n        reset,\n        paramsHash,\n        urlFor,\n        urlForCurrentDomain,\n        urlForStatic,\n\n        param          : name => paramsHash()[name],\n        websiteUrl     : () => `${location.protocol}//${location.hostname}/`,\n        getHostMap     : () => host_map,\n        resetStaticHost: () => { static_host = undefined; },\n    };\n})();\n\nmodule.exports = Url;\n","const extend = require('extend');\nrequire('./lib/polyfills/element.matches');\n\nconst template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[(+index) - 1]);\n};\n\nconst isEmptyObject = (obj) => {\n    let is_empty = true;\n    if (obj && obj instanceof Object) {\n        Object.keys(obj).forEach((key) => {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) is_empty = false;\n        });\n    }\n    return is_empty;\n};\n\nconst cloneObject = obj => (!isEmptyObject(obj) ? extend(true, Array.isArray(obj) ? [] : {}, obj) : obj);\n\nconst isDeepEqual = (a, b) => {\n    if (typeof a !== typeof b) {\n        return false;\n    } else if (Array.isArray(a)) {\n        return isEqualArray(a, b);\n    } else if (a && b && typeof a === 'object') {\n        return isEqualObject(a, b);\n    }\n    // else\n    return a === b;\n};\n\nconst isEqualArray = (arr1, arr2) => (\n    arr1 === arr2 ||\n    (\n        arr1.length === arr2.length &&\n        arr1.every((value, idx) => isDeepEqual(value, arr2[idx]))\n    )\n);\n\nconst isEqualObject = (obj1, obj2) => (\n    obj1 === obj2 ||\n    (\n        Object.keys(obj1).length === Object.keys(obj2).length &&\n        Object.keys(obj1).every(key => isDeepEqual(obj1[key], obj2[key]))\n    )\n);\n\n// Filters out duplicates in an array of objects by key\nconst unique = (array, key) => array.filter((e, idx) =>\n    array.findIndex((a, i) => a[key] ? a[key] === e[key] : i === idx) === idx);\n\nconst getPropertyValue = (obj, k) => {\n    let keys = k;\n    if (!Array.isArray(keys)) keys = [keys];\n    if (!isEmptyObject(obj) && keys[0] in obj && keys && keys.length > 1) {\n        return getPropertyValue(obj[keys[0]], keys.slice(1));\n    }\n    // else return clone of object to avoid overwriting data\n    return obj ? cloneObject(obj[keys[0]]) : undefined;\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach((attr) => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash = static_hash || (document.querySelector('script[src*=\"binary\"]').getAttribute('src') || '').split('?')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject  = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    isEmptyObject,\n    cloneObject,\n    isDeepEqual,\n    unique,\n    getPropertyValue,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n"],"sourceRoot":""}